# 2.2.1

## In-place merge of A E Q S U Y E I N O S T
| 0 1 2 3 4 5   | 6 7 8 9 10 11 |   |   | 0 1 2 3 4 5   | 6 7 8 9 10 11 |
| ------------- |:--------------|   |   | ------------- |:-------------|
| A E Q S U Y   | E I N O S T   |   |   | A E Q S U Y   | E I N O S T   |
|               |               | 0 | 6 |               |               |
| **A**         |               | 1 | 6 | **A** E Q S U Y   | **E** I N O S T |
| A **E**       |               | 2 | 6 | __ **E** Q S U Y  | **E** I N O S T |
| A E **E**     |               | 2 | 7 | __ __ **Q** S U Y | **E** I N O S T |
| A E E **I**   |               | 2 | 8 | __ __ **Q** S U Y | __ **I** N O S T|
| A E E I **N** |               | 2 | 9 | __ __ **Q** S U Y | __ __ **N** O S T|
| A E E I N **O** |             | 2 | 10 | __ __ **Q** S U Y| __ __ __ **O** S T|
| A E E I N O | **Q**           | 3 | 10 | __ __ **Q** S U Y| __ __ __ __ **S** T|
| A E E I N O | Q **S**         | 4 | 10 | __ __ __ **S** U Y | __ __ __ __ **S** T|
| A E E I N O | Q S **S**       | 4 | 11 | __ __ __ __ **U** Y| __ __ __ __ **S** T|
| A E E I N O | Q S S **T**     | 4 | 5 | __ __ __ __ **U** Y | __ __ __ __ __ **T**|
| A E E I N O | Q S S T **U**   | 5 | 6 | __ __ __ __ **U** **Y** | __ __ __ __ __ __|
| A E E I N | O Q S S T U **Y** | 6 | 7 | __ __ __ __ __ **Y**| __ __ __ __ __ __|
| A E E I N | O Q S S T U Y

# 2.2.2
## Top down mergesort of A E Q S U Y E I N O S T
|                                       | 0 1 2 3 4 5 6 7 8 9 10 11 |
|---------------------------------------| ------------------------- |
|                                       | A E Q S U Y E I N O  S  T |
| merge(a, 0, 0, 1)                     | **A E** Q S U Y E I N O  S  T |
| merge(a, 2, 2, 3)                     | A E **Q S** U Y E I N O  S  T |
| merge(a, 0, 1, 3)                     | **A E Q S** U Y E I N O  S  T |
| merge(a, 4, 4, 5)                     | A E Q S **U Y** E I N O  S  T |
| merge(a, 6, 6, 7)                     | A E Q S U Y **E I** N O  S  T |
| merge(a, 4, 5, 7)                     | A E Q S **E I U Y** N O  S  T |
| merge(a, 0, 3, 7)                     | **A E E I Q S U Y** N O  S  T |
| merge(a, 8, 8, 9)                     | A E E I Q S U Y **N O**  S  T |
| merge(a, 10, 10, 11)                  | A E E I Q S U Y N O  **S  T** |
| merge(a, 8, 9, 11)                    | A E E I Q S U Y **N O  S  T** |
| merge(a, 0, 7, 11)                    | **A E E I N O Q  S  S T U Y** |

# 2.2.3
## Bottom-up mergesort of A E Q S U Y E I N O S T
|                                       | 0 1 2 3 4 5 6 7 8 9 10 11 |
|---------------------------------------| ------------------------- |
|                                       | A E Q S U Y E I N O  S  T |
| merge(a, 0, 0, 1)                     | **A E** Q S U Y E I N O  S  T |
| merge(a, 2, 2, 3)                     | A E **Q S** U Y E I N O  S  T |
| merge(a, 4, 4, 5)                     | A E Q S **U Y** E I N O  S  T |
| merge(a, 6, 6, 7)                     | A E Q S U Y **E I** N O  S  T |
| merge(a, 8, 8, 9)                     | A E Q S U Y E I  **N O** S  T |
| merge(a, 10, 10, 11)                  | A E Q S U Y E I N O  **S  T** |
| merge(a, 0, 1, 3)                     | **A E Q S** U Y E I N O  S  T |
| merge(a, 4, 5, 7)                     | A E Q S **E I U Y** N O  S  T |
| merge(a, 8, 9, 11)                    | A E Q S E I U Y **N O  S  T** |
| merge(a, 0, 3, 7)                     | **A E E I Q S U Y** N O  S  T |
| merge(a, 0, 7, 11)                    | **A E E I N O Q S  S T U Y ** |

# 2.2.4
Yes, the in-place merge produce proper output if and only if the two input subarrays are in sorted order.
Exampleï¼š
| 0 1 2 3 4 5   | 6 7 8 9 10 11 |   |   | 0 1 2 3 4 5   | 6 7 8 9 10 11 |
| ------------- |:--------------|   |   | ------------- |:-------------|
| A B C D E F   | A B C  D  E S |   |   | A B C D E F   | S A B C  D  E|

Final output: | A B C D E F   | A B C  D  E S | is not proper

# 2.2.7
The idea of merge sort is to merge sorted arrat A and B,
by selecting the smallest at the head of A and B, and assigning sorted outcome.

A _1_ _2_ ... _n_
B _1_ _2_ ... _n_

compare A_1_ with B_1_, who is smaller, who is assigned to outcome, and move its point to the next one
Hence, the time complexity of mergeSort is O(N), which means that the number of compares is monotonically increasing.


# 2.2.8
Proof:
C(N) := #Compares to sort array of length N
lgN <= C(N) <= 2C(N/2) + N
Let N = 2^n
n <= C(N)
2(n-1) <= 2C(N/2) <= ...
Since a<b means a < the minimum of b, C(N) <= N + 2(n-1) + 2(n-2) + .... + 2*1 = N+2lgN
Since lgN<N
The time complexity is linear.
